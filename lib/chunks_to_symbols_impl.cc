#include "chunks_to_symbols_impl.h"
#include <gnuradio/io_signature.h>
#include <cstdio>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdexcept>
#include <cstring>
#include <gnuradio/tag_checker.h>
#include <iostream>
#include <fstream>
#include <gnuradio/basic_block.h>
#include <gnuradio/config.h>

using namespace gr::ieee802_15_4;

std::vector<gr_complex> d_symbol_table;

const int table_64[] = {
-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,1,1,-1,1,1,-1,-1,1,1,1,-1,-1,-1,-1,1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,1,1,-1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,
-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,
-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,1,1,-1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,1,1,-1,1,1,-1,-1,1,1,1,-1,-1,-1,-1,1,1,
-1,-1,-1,-1,-1,1,1,1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,-1,1,1,-1,
-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,1,1,-1,1,1,-1,-1,1,1,1,-1,-1,-1,-1,1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,1,1,-1,
-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,-1,1,1,1,1,-1,1,1,
1,1,-1,1,1,-1,-1,1,1,1,-1,-1,-1,-1,1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,1,1,-1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,
1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,
-1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,1,1,-1,1,1,-1,-1,1,1,1,-1,-1,-1,-1,1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,1,1,-1,-1,1,1,-1,1,-1,1,1,
-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,
1,1,-1,-1,-1,-1,1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,1,1,-1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,1,1,-1,1,1,-1,-1,1,
1,-1,-1,1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,1,-1,-1,-1,1,1,-1,-1,
-1,-1,1,-1,1,1,1,-1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,1,1,-1,1,1,-1,-1,1,1,1,-1,-1,-1,-1,1,1,-1,1,-1,1,-1,-1,1,-1,
-1,1,1,1,1,-1,1,1,-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,
-1,-1,1,-1,-1,1,-1,1,1,1,-1,1,1,-1,-1,1,1,1,-1,-1,-1,-1,1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,1,1,-1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,1,1,-1,
-1,1,1,1,-1,-1,-1,-1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,1,1,-1,1,-1,1,1
};

const int table_32[] = {
1,1,-1,1,1,-1,-1,1,1,1,-1,-1,-1,-1,1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,1,1,-1,
1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,-1,1,1,1,1,-1,1,1,
-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,1,1,-1,1,1,-1,1,1,-1,-1,1,1,1,-1,-1,-1,-1,1,1,
-1,-1,-1,-1,-1,1,1,1,-1,1,1,1,1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,-1,1,1,-1,
-1,-1,1,-1,1,1,1,-1,1,1,-1,1,1,-1,-1,1,1,1,-1,-1,-1,-1,1,1,-1,1,-1,1,-1,-1,1,-1,
-1,1,1,1,1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,
1,1,-1,-1,-1,-1,1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,1,1,-1,1,1,-1,1,1,-1,-1,1,
1,-1,-1,1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,-1,1,1,1,1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,
1,1,1,-1,1,1,-1,1,1,-1,-1,1,1,1,-1,-1,-1,-1,1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,
1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,-1,1,1,1,
-1,-1,1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,1,1,-1,1,1,-1,1,1,-1,-1,1,1,1,-1,-1,
-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,-1,1,1,1,1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,
-1,-1,1,-1,-1,-1,1,-1,1,1,1,-1,1,1,-1,1,1,-1,-1,1,1,1,-1,-1,-1,-1,1,1,-1,1,-1,1,
-1,1,1,1,-1,1,1,1,1,-1,1,1,1,-1,-1,-1,1,1,-1,-1,1,-1,-1,1,-1,1,1,-1,-1,-1,-1,-1,
1,-1,-1,1,1,1,-1,-1,-1,-1,1,1,-1,1,-1,1,-1,-1,1,-1,-1,-1,1,-1,1,1,1,-1,1,1,-1,1,
1,1,-1,-1,1,-1,-1,1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,-1,1,1,1,1,-1,1,1,1,-1,-1,-1
};

const int table_16[] = {
-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,
-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,
-1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,1,1 1,-1,
-1,1,1,1,-1,-1,-1,-1,-1,1,1,-1,1,-1,1,1,
-1,1,-1,1,-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,
-1,-1,-1,-1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,
1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,
1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,-1,1,1,-1,
-1,1,-1,-1,1,1,1,1,1,-1,-1,-1,1,-1,-1,1,
-1,-1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,-1,
1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1,1,1,1,
1,1,-1,1,1,1,-1,-1,-1,-1,-1,1,1,-1,1,-1,
1,-1,-1,1,-1,1,-1,-1,1,1,1,1,1,-1,-1,-1,
1,1,-1,-1,-1,-1,-1,1,1,-1,1,-1,1,1,-1,1,
1,1,1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,
1,-1,1,-1,1,1,-1,1,1,1,-1,-1,-1,-1,-1,1
};
int chunks_to_symbols_impl::symbol_table_init(int d){
	if(d==32){
		for(int i = 0; i < 256;i++)
			d_symbol_table.push_back(gr_complex(table_32[2*i],table_32[2*i+1]));
	}
}

chunks_to_symbols::sptr
chunks_to_symbols::make()
{
	return gnuradio::get_initial_sptr(new chunks_to_symbols_impl());
}

chunks_to_symbols_impl::chunks_to_symbols_impl():
	sync_interpolator("chunks_to_symbols",
			io_signature::make(1,-1,sizeof(int8_t)),
			io_signature::make(1,-1,sizeof(gr_complex)),
			32){

//	message_port_register_in(pmt::mp("set_symbol_table"));
//	set_msg_handler(pmt::mp("set_symbol_table"),
//			boost::bind(chunks_to_symbols_impl::symbol_table_init,this,_1));
	}

chunks_to_symbols_impl::~chunks_to_symbols_impl(){

}


int chunks_to_symbols_impl::work(
	int noutput_items,
		gr_vector_const_void_star &input_items,
		gr_vector_void_star &output_items)
{
    //	this->set_interpolation(16);
	 // fprintf(stderr,"here!\n");
	  assert(noutput_items % d_D == 0);
      assert(input_items.size() == output_items.size());
      int nstreams = input_items.size();
	//  fprintf(stderr,"input_items size is %d\n",nstreams);
//	  int *in1 = (int *)(input_items[0]);
	  symbol_table_init(32);
	  int d_D = 16;
//	  fprintf(stderr,"The first input is %d\n",*in1);


      for(int m = 0 ; m < nstreams; m++) {
        const int8_t *in = (int8_t*)input_items[m];
        gr_complex *out = (gr_complex *)output_items[0];
	//	fprintf(stderr," %d\n",noutput_items);
        std::vector<tag_t> tags;
        get_tags_in_range(tags, m, nitems_read(m), nitems_read(m)+noutput_items/d_D);
        tag_checker tchecker(tags);

        // per stream processing
        for(int i = 0; i < noutput_items / d_D; i++) {
	     // fprintf(stderr,"in:%d\n",in[i]);
          std::vector<tag_t> tags_now;
          tchecker.get_tags(tags_now, i+nitems_read(m));
          for (unsigned int j=0; j<tags_now.size(); j++) {
            tag_t tag = tags_now[j];
            dispatch_msg(tag.key, tag.value);
          }
          assert(((unsigned int)in[i]*d_D+d_D) <= d_symbol_table.size());
          memcpy(out, &d_symbol_table[(unsigned int)in[i]*d_D], d_D*sizeof(gr_complex));
          out+=d_D;
		}
      }
      return noutput_items;
}
